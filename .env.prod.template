# Production Environment Variables Template
# =========================================
# Скопируйте этот файл в .env.prod и обновите значения для вашего production окружения
# Команда: cp .env.prod.template .env.prod && chmod 600 .env.prod

# ===========================================
# ОБЯЗАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ (ОБНОВИТЕ!)
# ===========================================

# Database - ОБНОВИТЕ для вашей production базы данных
DATABASE_URL=postgresql://books_app:CHANGE_THIS_STRONG_PASSWORD@postgres:5432/books_app?schema=public

# JWT Secrets - СГЕНЕРИРУЙТЕ НОВЫЕ КЛЮЧИ!
# Используйте: openssl rand -base64 32
JWT_ACCESS_SECRET=GENERATE_NEW_32_CHAR_SECRET_HERE
JWT_REFRESH_SECRET=GENERATE_NEW_32_CHAR_SECRET_HERE

# Admin Users - УКАЖИТЕ РЕАЛЬНЫЕ EMAIL АДРЕСА
ADMIN_EMAILS=admin@yourdomain.com
CONTENT_MANAGER_EMAILS=editor@yourdomain.com

# Domain Configuration - ОБНОВИТЕ ДЛЯ ВАШЕГО ДОМЕНА
# LOCAL_PUBLIC_BASE_URL - базовый URL для генерации ссылок на статические файлы
# CORS_ORIGIN - разрешенные origins для CORS (можно указать несколько через запятую)
LOCAL_PUBLIC_BASE_URL=https://api.bibliaris.com
CORS_ORIGIN=https://bibliaris.com,http://localhost:3000,http://localhost:3001

# ===========================================
# PRODUCTION НАСТРОЙКИ (НЕ ИЗМЕНЯЙТЕ!)
# ===========================================

# Environment
NODE_ENV=production

# Server
PORT=5000
HOST=0.0.0.0

# JWT Configuration
JWT_ACCESS_EXPIRES_IN=12h
JWT_REFRESH_EXPIRES_IN=7d

# Language Policy
DEFAULT_LANGUAGE=en

# CORS Configuration
# CORS_CREDENTIALS - включить поддержку credentials (cookies) для CORS запросов
# Установите в 1 только если фронтенд использует withCredentials: true или credentials: 'include'
CORS_CREDENTIALS=1

# ===========================================
# SECURITY SETTINGS (КРИТИЧНО ДЛЯ ПРОДАКШЕНА!)
# ===========================================

# Swagger - ОТКЛЮЧЕН в production
SWAGGER_ENABLED=0

# Rate Limiting - ВКЛЮЧЕН для защиты
RATE_LIMIT_GLOBAL_ENABLED=1
RATE_LIMIT_GLOBAL_MAX=100
RATE_LIMIT_GLOBAL_WINDOW_MS=60000

# Comments Rate Limiting
RATE_LIMIT_ENABLED=1
RATE_LIMIT_COMMENTS_PER_MINUTE=10
RATE_LIMIT_COMMENTS_WINDOW_MS=60000

# Auth Rate Limiting - защита от брутфорса
RATE_LIMIT_AUTH_ENABLED=1
# Login limits (защита от брутфорса пароля)
RATE_LIMIT_LOGIN_MAX=5
RATE_LIMIT_LOGIN_WINDOW_MS=60000
# Register limits (защита от спам-регистраций)
RATE_LIMIT_REGISTER_MAX=3
RATE_LIMIT_REGISTER_WINDOW_MS=300000
# Refresh token limits
RATE_LIMIT_REFRESH_MAX=10
RATE_LIMIT_REFRESH_WINDOW_MS=60000

# Proxy Trust - ВКЛЮЧЕН для работы с reverse proxy
TRUST_PROXY=1

# Roles Cache
ROLES_CACHE_TTL_MS=5000

# ===========================================
# UPLOADS & STORAGE
# ===========================================

# Local Uploads
LOCAL_UPLOADS_DIR=var/uploads

# Upload Limits (в мегабайтах)
UPLOADS_MAX_IMAGE_MB=5
UPLOADS_MAX_AUDIO_MB=100
UPLOADS_PRESIGN_TTL_SEC=600

# Allowed Content Types
UPLOADS_ALLOWED_IMAGE_CT=image/jpeg,image/png,image/webp
UPLOADS_ALLOWED_AUDIO_CT=audio/mpeg,audio/mp4,audio/aac,audio/ogg

# ===========================================
# PERFORMANCE & CACHING
# ===========================================

# Cache TTLs (в миллисекундах)
SITEMAP_CACHE_TTL_MS=60000
VIEWS_CACHE_TTL_MS=30000
# SEO_CACHE_TTL_MS=300000  # раскомментировать при необходимости

# Body Limits
BODY_LIMIT_JSON=1mb
BODY_LIMIT_URLENCODED=1mb

# ===========================================
# DATABASE CONFIGURATION (POSTGRES)
# ===========================================

# PostgreSQL Settings (для docker-compose.prod.yml)
POSTGRES_DB=books_app
POSTGRES_USER=books_app
POSTGRES_PASSWORD=CHANGE_THIS_STRONG_PASSWORD
POSTGRES_PORT=5432

# ===========================================
# REDIS CONFIGURATION (ОПЦИОНАЛЬНО)
# ===========================================

# Redis для BullMQ (раскомментировать если используется)
# REDIS_HOST=redis
# REDIS_PORT=6379
# REDIS_PASSWORD=CHANGE_THIS_IF_USED
# REDIS_URL=redis://redis:6379

# BullMQ Settings
# BULLMQ_IN_PROCESS_WORKER=0
# BULLMQ_DEMO_QUEUE=demo
# BULLMQ_DEMO_CONCURRENCY=2
# BULLMQ_WORKER_LOG_LEVEL=info
# BULLMQ_WORKER_SHUTDOWN_TIMEOUT_MS=5000

# ===========================================
# MONITORING & LOGGING (ОПЦИОНАЛЬНО)
# ===========================================

# Sentry (раскомментировать при использовании)
# SENTRY_DSN=https://your-sentry-dsn-here
# SENTRY_ENVIRONMENT=production
# SENTRY_TRACES_SAMPLE_RATE=0.1

# Log Level
# LOG_LEVEL=info

# ===========================================
# EXTERNAL SERVICES (ОПЦИОНАЛЬНО)
# ===========================================

# Email Service (раскомментировать при настройке)
# SMTP_HOST=smtp.yourdomain.com
# SMTP_PORT=587
# SMTP_USER=noreply@yourdomain.com
# SMTP_PASS=your_smtp_password
# SMTP_FROM=noreply@yourdomain.com

# S3/R2 Storage (раскомментировать при миграции с локального хранилища)
# R2_ACCOUNT_ID=your_account_id
# R2_ACCESS_KEY_ID=your_access_key
# R2_SECRET_ACCESS_KEY=your_secret_key
# R2_BUCKET=books-media
# R2_ENDPOINT=https://account_id.r2.cloudflarestorage.com
# R2_PUBLIC_BASE_URL=https://media.yourdomain.com

# ===========================================
# ПРИМЕР КОМАНД ДЛЯ ГЕНЕРАЦИИ СЕКРЕТОВ
# ===========================================

# JWT секреты (выполните эти команды и скопируйте результат):
# openssl rand -base64 32
# openssl rand -base64 32

# PostgreSQL пароль (сгенерируйте сильный пароль):
# openssl rand -base64 24

# ===========================================
# ВАЖНЫЕ ЗАМЕЧАНИЯ
# ===========================================

# 1. НИКОГДА не коммитьте .env.prod в git!
# 2. Установите права только для чтения: chmod 600 .env.prod
# 3. Создайте резервную копию настроек в безопасном месте
# 4. Используйте сильные пароли (24+ символов)
# 5. Регулярно ротируйте JWT секреты в production
# 6. Проверьте настройки командой: ./scripts/check_prod_config.js

# ===========================================
# ПРОВЕРКА КОНФИГУРАЦИИ
# ===========================================

# После создания .env.prod запустите проверку:
# node check_prod_config.js
# ./scripts/health_check.sh --url http://localhost:5000

# Для проверки production сервера:
# ./scripts/health_check.sh --url https://api.yourdomain.com

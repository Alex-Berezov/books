/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AppController_getRoot'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AppController_getHealth'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/books': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all books with pagination */
    get: operations['BookController_findAll'];
    put?: never;
    /** Create new book */
    post: operations['BookController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/books/{slug}/overview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get book overview by slug
     * @description Агрегированный обзор книги: доступные языки, наличие текста/аудио/пересказа, ID версий и SEO-бандл. Публично показывает только опубликованные версии.
     */
    get: operations['BookController_overview'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/books/slug/{slug}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get book by slug */
    get: operations['BookController_findBySlug'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/books/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get book by ID */
    get: operations['BookController_findOne'];
    put?: never;
    post?: never;
    /** Delete book */
    delete: operations['BookController_remove'];
    options?: never;
    head?: never;
    /** Update book */
    patch: operations['BookController_update'];
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register new user */
    post: operations['AuthController_register'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login by email/password */
    post: operations['AuthController_login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refresh tokens */
    post: operations['AuthController_refresh'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout (stateless placeholder) */
    post: operations['AuthController_logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current user profile */
    get: operations['UsersController_me'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update current user profile */
    patch: operations['UsersController_updateMe'];
    trace?: never;
  };
  '/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List users (admin only) */
    get: operations['UsersController_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user by id (admin only) */
    get: operations['UsersController_getById'];
    put?: never;
    post?: never;
    /** Delete user by id (admin only) */
    delete: operations['UsersController_deleteById'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/{id}/roles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List user roles (admin only) */
    get: operations['UsersController_listRoles'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/{id}/roles/{role}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Assign role to user (admin only) */
    post: operations['UsersController_assignRole'];
    /** Revoke role from user (admin only) */
    delete: operations['UsersController_revokeRole'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/books/{bookId}/versions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List versions for a book (public)
     * @description Публичный список версий книги. Возвращает только опубликованные версии (status=published).
     */
    get: operations['BookVersionController_list'];
    put?: never;
    /**
     * Create book version
     * @description Создаёт версию книги в статусе draft. Опубликовать можно через PATCH /versions/:id/publish.
     */
    post: operations['BookVersionController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/{lang}/books/{bookId}/versions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Admin: list versions for a book (includes drafts) */
    get: operations['BookVersionController_listAdmin'];
    put?: never;
    /** Admin: create book version in selected admin language */
    post: operations['BookVersionController_createAdmin'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/versions/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get version by id */
    get: operations['BookVersionController_get'];
    put?: never;
    post?: never;
    /** Delete version by id */
    delete: operations['BookVersionController_remove'];
    options?: never;
    head?: never;
    /** Update version by id */
    patch: operations['BookVersionController_update'];
    trace?: never;
  };
  '/versions/{id}/publish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Publish version */
    patch: operations['BookVersionController_publish'];
    trace?: never;
  };
  '/versions/{id}/unpublish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Unpublish version (set draft) */
    patch: operations['BookVersionController_unpublish'];
    trace?: never;
  };
  '/versions/{bookVersionId}/chapters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List chapters by book version */
    get: operations['ChapterController_list'];
    put?: never;
    /** Create chapter for a book version */
    post: operations['ChapterController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chapters/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get chapter by id */
    get: operations['ChapterController_get'];
    put?: never;
    post?: never;
    /** Delete chapter by id */
    delete: operations['ChapterController_remove'];
    options?: never;
    head?: never;
    /** Update chapter by id */
    patch: operations['ChapterController_update'];
    trace?: never;
  };
  '/versions/{bookVersionId}/audio-chapters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List audio chapters by book version */
    get: operations['AudioChapterController_list'];
    put?: never;
    /** Create audio chapter for a book version */
    post: operations['AudioChapterController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/audio-chapters/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get audio chapter by id */
    get: operations['AudioChapterController_get'];
    put?: never;
    post?: never;
    /** Delete audio chapter by id */
    delete: operations['AudioChapterController_remove'];
    options?: never;
    head?: never;
    /** Update audio chapter by id */
    patch: operations['AudioChapterController_update'];
    trace?: never;
  };
  '/versions/{bookVersionId}/seo': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get SEO meta for a book version */
    get: operations['SeoController_get'];
    /** Create or update SEO meta for a book version (upsert) */
    put: operations['SeoController_upsert'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/seo/resolve': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Resolve SEO bundle (meta/OG/Twitter/canonical) with fallbacks */
    get: operations['SeoController_resolve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{lang}/seo/resolve': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Resolve SEO bundle (public) for specific language (by path prefix) */
    get: operations['SeoController_resolveWithLang'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/versions/{bookVersionId}/summary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get book summary for a version */
    get: operations['BookSummaryController_get'];
    /** Create or update summary for a version (upsert) */
    put: operations['BookSummaryController_upsert'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List categories */
    get: operations['CategoryController_list'];
    put?: never;
    /** Create category */
    post: operations['CategoryController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/categories/tree': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get full categories tree (root nodes with nested children) */
    get: operations['CategoryController_tree'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/categories/{id}/children': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get direct children of the category */
    get: operations['CategoryController_children'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/categories/{id}/ancestors': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get ancestors path of the category (root → ... → parent) */
    get: operations['CategoryController_ancestors'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/categories/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete category */
    delete: operations['CategoryController_remove'];
    options?: never;
    head?: never;
    /** Update category */
    patch: operations['CategoryController_update'];
    trace?: never;
  };
  '/categories/{slug}/books': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Публичный список версий книги по категории (без префикса языка) */
    get: operations['CategoryController_publicBySlug'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{lang}/categories/{slug}/books': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Публичный список версий книги по локализованной категории */
    get: operations['PublicController_categoriesBySlug'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/categories/{id}/translations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List category translations (admin) */
    get: operations['CategoryController_listTranslations'];
    put?: never;
    /** Create category translation (admin) */
    post: operations['CategoryController_createTranslation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/categories/{id}/translations/{language}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete category translation (admin) */
    delete: operations['CategoryController_deleteTranslation'];
    options?: never;
    head?: never;
    /** Update category translation (admin) */
    patch: operations['CategoryController_updateTranslation'];
    trace?: never;
  };
  '/versions/{id}/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Attach category to a book version */
    post: operations['CategoryController_attach'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/versions/{id}/categories/{categoryId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Detach category from a book version */
    delete: operations['CategoryController_detach'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/me/bookshelf': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List my bookshelf */
    get: operations['BookshelfController_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/me/bookshelf/{versionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add version to my bookshelf */
    post: operations['BookshelfController_add'];
    /** Remove version from my bookshelf */
    delete: operations['BookshelfController_remove'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List comments by target */
    get: operations['CommentsController_list'];
    put?: never;
    /** Create comment */
    post: operations['CommentsController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/comments/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get comment */
    get: operations['CommentsController_get'];
    put?: never;
    post?: never;
    /** Delete (soft) comment. Owner or admin/content_manager. */
    delete: operations['CommentsController_remove'];
    options?: never;
    head?: never;
    /** Update comment (owner can edit text; admins/moderators can also hide/unhide) */
    patch: operations['CommentsController_update'];
    trace?: never;
  };
  '/likes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Like a comment or a book version (exactly one target) */
    post: operations['LikesController_like'];
    /** Remove like (idempotent) */
    delete: operations['LikesController_unlike'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/likes/count': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get like count for a target */
    get: operations['LikesController_count'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/likes/toggle': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Toggle like; returns current state and count */
    patch: operations['LikesController_toggle'];
    trace?: never;
  };
  '/me/progress/{versionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get my reading/listening progress for a book version */
    get: operations['ReadingProgressController_get'];
    /** Create or update my reading/listening progress for a book version */
    put: operations['ReadingProgressController_upsert'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/views': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Record a view (anonymous or authorized) */
    post: operations['ViewStatsController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/views/aggregate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Aggregate views by day for a version */
    get: operations['ViewStatsController_aggregate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/views/top': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Top viewed versions for a period */
    get: operations['ViewStatsController_top'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/uploads/presign': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get a presigned direct-upload token and URL */
    post: operations['UploadsController_presign'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/uploads/direct': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Direct binary upload by token (local driver) */
    post: operations['UploadsController_direct'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/uploads/confirm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Confirm an uploaded object and return its public URL */
    post: operations['UploadsController_confirm'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/uploads': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete uploaded object by key */
    delete: operations['UploadsController_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/status/rate-limit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Rate limit configuration */
    get: operations['StatusController_getRateLimit'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/status/sentry-test': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Сгенерировать тестовую ошибку для проверки интеграции Sentry */
    post: operations['StatusController_sentryTest'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List tags */
    get: operations['TagsController_list'];
    put?: never;
    /** Create tag */
    post: operations['TagsController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete tag */
    delete: operations['TagsController_remove'];
    options?: never;
    head?: never;
    /** Update tag */
    patch: operations['TagsController_update'];
    trace?: never;
  };
  '/tags/{slug}/books': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Публичный список версий книги по тегу (без префикса языка) */
    get: operations['TagsController_publicBySlug'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/versions/{id}/tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Attach tag to a book version */
    post: operations['TagsController_attach'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/versions/{id}/tags/{tagId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Detach tag from a book version */
    delete: operations['TagsController_detach'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/{id}/translations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List tag translations (admin) */
    get: operations['TagsController_listTranslations'];
    put?: never;
    /** Create tag translation (admin) */
    post: operations['TagsController_createTranslation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/{id}/translations/{language}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete tag translation (admin) */
    delete: operations['TagsController_deleteTranslation'];
    options?: never;
    head?: never;
    /** Update tag translation (admin) */
    patch: operations['TagsController_updateTranslation'];
    trace?: never;
  };
  '/pages/{slug}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Публичная страница по slug (только published) */
    get: operations['PagesController_getPublic'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/{lang}/pages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Листинг страниц (админ): draft+published */
    get: operations['PagesController_adminList'];
    put?: never;
    /** Создать страницу (админ) */
    post: operations['PagesController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/{lang}/pages/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Удалить страницу (админ) */
    delete: operations['PagesController_remove'];
    options?: never;
    head?: never;
    /** Обновить страницу (админ) */
    patch: operations['PagesController_update'];
    trace?: never;
  };
  '/admin/{lang}/pages/{id}/publish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Опубликовать страницу */
    patch: operations['PagesController_publish'];
    trace?: never;
  };
  '/admin/{lang}/pages/{id}/unpublish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Снять страницу с публикации */
    patch: operations['PagesController_unpublish'];
    trace?: never;
  };
  '/media/confirm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Confirm uploaded object and create/update MediaAsset */
    post: operations['MediaController_confirm'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List media assets */
    get: operations['MediaController_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** One-step upload: multipart file -> presign -> direct -> media.confirm */
    post: operations['MediaController_uploadOne'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/media/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Soft-delete media asset and try to remove file */
    delete: operations['MediaController_remove'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{lang}/books/{slug}/overview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Публичный обзор книги с префиксом языка */
    get: operations['PublicController_overview'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{lang}/pages/{slug}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Публичная CMS-страница с префиксом языка */
    get: operations['PublicController_getPage'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/{lang}/tags/{slug}/books': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Публичный список версий книги по локализованному тегу */
    get: operations['PublicController_tagsBySlug'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sitemap.xml': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Sitemap index (per-language) */
    get: operations['SitemapController_sitemapIndex'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sitemap-{lang}.xml': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Sitemap for specific language */
    get: operations['SitemapController_sitemapForLang'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/robots.txt': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Robots.txt */
    get: operations['SitemapController_robots'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/health/liveness': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Liveness probe */
    get: operations['HealthController_liveness'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/health/readiness': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Readiness probe (DB + Redis) */
    get: operations['HealthController_readiness'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/metrics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MetricsController_getMetrics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/queues/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Queues subsystem status */
    get: operations['QueueController_status'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/queues/demo/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Demo queue stats */
    get: operations['QueueController_stats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/queues/demo/enqueue': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Enqueue a demo job */
    post: operations['QueueController_enqueue'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CreateBookDto: {
      /**
       * @description Уникальный slug книги. Нижний регистр: латиница и цифры, разделитель — дефис. Без пробелов, без двойных/крайних дефисов. Примеры: "harry-potter", "book-123"
       * @example harry-potter
       */
      slug: string;
    };
    UpdateBookDto: {
      /**
       * @description Уникальный slug книги. Нижний регистр: латиница и цифры, разделитель — дефис. Без пробелов, без двойных/крайних дефисов. Примеры: "harry-potter", "book-123"
       * @example harry-potter-updated
       */
      slug?: string;
    };
    RegisterDto: Record<string, never>;
    AuthResponse: Record<string, never>;
    LoginDto: Record<string, never>;
    RefreshDto: Record<string, never>;
    PublicUserDto: Record<string, never>;
    PagedUsersDto: Record<string, never>;
    UpdateMeDto: Record<string, never>;
    CreateBookVersionDto: {
      /**
       * @description Язык версии книги
       * @example en
       * @enum {string}
       */
      language: 'en' | 'es' | 'fr' | 'pt';
      /**
       * @description Заголовок
       * @example Harry Potter and the Philosopher's Stone
       */
      title: string;
      /**
       * @description Автор
       * @example J.K. Rowling
       */
      author: string;
      /**
       * @description Описание
       * @example First book of the series
       */
      description: string;
      /**
       * @description URL обложки
       * @example https://cdn.example.com/covers/hp1.jpg
       */
      coverImageUrl: string;
      /**
       * @description Тип контента
       * @example text
       * @enum {string}
       */
      type: 'text' | 'audio' | 'referral';
      /**
       * @description Бесплатная ли версия
       * @example true
       */
      isFree: boolean;
      /**
       * @description Реферальная ссылка
       * @example https://amazon.com/ref123
       */
      referralUrl?: string;
      /**
       * @description Опциональные SEO metaTitle
       * @example Harry Potter — Summary
       */
      seoMetaTitle?: string;
      /**
       * @description Опциональные SEO metaDescription
       * @example Overview, themes and details about the book
       */
      seoMetaDescription?: string;
    };
    UpdateBookVersionDto: {
      /**
       * @example es
       * @enum {string}
       */
      language?: 'en' | 'es' | 'fr' | 'pt';
      /** @example Harry Potter and the Sorcerer's Stone */
      title?: string;
      /** @example J.K. Rowling */
      author?: string;
      /** @example Updated description text */
      description?: string;
      /** @example https://cdn.example.com/covers/hp1-new.jpg */
      coverImageUrl?: string;
      /**
       * @example audio
       * @enum {string}
       */
      type?: 'text' | 'audio' | 'referral';
      /** @example false */
      isFree?: boolean;
      /** @example https://partner.example.com/ref/456 */
      referralUrl?: string;
      /** @example HP1 — Summary (Updated) */
      seoMetaTitle?: string;
      /** @example New meta description text */
      seoMetaDescription?: string;
    };
    CreateChapterDto: {
      /**
       * @description Порядковый номер главы внутри версии
       * @example 1
       */
      number: number;
      /**
       * @description Заголовок главы
       * @example Chapter 1. The Boy Who Lived
       */
      title: string;
      /**
       * @description Контент главы (markdown/html/plain)
       * @example Once upon a time...
       */
      content: string;
    };
    UpdateChapterDto: {
      /**
       * @description Порядковый номер главы
       * @example 2
       */
      number?: number;
      /** @description Заголовок главы */
      title?: string;
      /** @description Контент главы */
      content?: string;
    };
    CreateAudioChapterDto: {
      /**
       * @description Порядковый номер аудио-главы внутри версии
       * @example 1
       */
      number: number;
      /**
       * @description Заголовок аудио-главы
       * @example Chapter 1. The Beginning
       */
      title: string;
      /**
       * @description URL аудио файла
       * @example https://cdn.example.com/audio/1.mp3
       */
      audioUrl: string;
      /**
       * @description Длительность в секундах
       * @example 360
       */
      duration: number;
    };
    UpdateAudioChapterDto: {
      /**
       * @description Порядковый номер аудио-главы
       * @example 2
       */
      number?: number;
      /** @description Заголовок аудио-главы */
      title?: string;
      /** @description URL аудио файла */
      audioUrl?: string;
      /** @description Длительность в секундах */
      duration?: number;
    };
    UpdateBookSummaryDto: {
      /** @description Short summary text */
      summary: string;
      /** @description Optional analysis */
      analysis?: string;
      /** @description Optional themes */
      themes?: string;
    };
    CategoryTreeNodeDto: {
      /** Format: uuid */
      id: string;
      name: string;
      slug: string;
      /** @enum {string} */
      type: 'genre' | 'author' | 'popular' | 'etc';
      parentId?: string | null;
      children: components['schemas']['CategoryTreeNodeDto'][];
    };
    CreateCategoryDto: {
      /**
       * @description Тип категории
       * @enum {string}
       */
      type: 'genre' | 'author' | 'popular' | 'etc';
      /**
       * @description Название категории
       * @example Fantasy
       */
      name: string;
      /**
       * @description Slug категории
       * @example fantasy
       */
      slug: string;
      /** @description Родительская категория (необязательно) */
      parentId?: Record<string, never> | null;
    };
    UpdateCategoryDto: {
      /** @enum {string} */
      type?: 'genre' | 'author' | 'popular' | 'etc';
      /** @description Название категории */
      name?: string;
      /** @description Slug категории */
      slug?: string;
      /** @description Родительская категория */
      parentId?: Record<string, never> | null;
    };
    CreateCategoryTranslationDto: {
      /** @enum {string} */
      language: 'en' | 'es' | 'fr' | 'pt';
      /** @description Локализованное имя категории */
      name: string;
      /** @description Локализованный slug категории */
      slug: string;
    };
    UpdateCategoryTranslationDto: {
      /** @enum {string} */
      language?: 'en' | 'es' | 'fr' | 'pt';
      /** @description Локализованное имя категории */
      name?: string;
      /** @description Локализованный slug категории */
      slug?: string;
    };
    AttachCategoryDto: {
      /** @description ID категории */
      categoryId: string;
    };
    BookVersionDto: {
      id: string;
      bookId: string;
      /** @example en */
      language: string;
      title: string;
      author: string;
      description: string;
      /** @example https://example.com/c.jpg */
      coverImageUrl: string;
      /** @example text */
      type: string;
      isFree: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    BookshelfItemDto: {
      id: string;
      /** Format: date-time */
      addedAt: string;
      bookVersion: components['schemas']['BookVersionDto'];
    };
    BookshelfListDto: {
      items: components['schemas']['BookshelfItemDto'][];
      /** @example 1 */
      page: number;
      /** @example 10 */
      limit: number;
      /** @example 1 */
      total: number;
      /** @example false */
      hasNext: boolean;
    };
    CommentUserDto: {
      id: string;
      email: string;
      name?: Record<string, never> | null;
    };
    CommentDto: {
      id: string;
      parentId: Record<string, never> | null;
      bookVersionId: Record<string, never> | null;
      chapterId: Record<string, never> | null;
      audioChapterId: Record<string, never> | null;
      text: string;
      isHidden: boolean;
      isDeleted: boolean;
      createdAt: string;
      updatedAt: string;
      user: components['schemas']['CommentUserDto'];
      children: components['schemas']['CommentDto'][];
    };
    CommentListDto: {
      items: components['schemas']['CommentDto'][];
      total: number;
      page: number;
      limit: number;
      hasNext: boolean;
    };
    CreateCommentDto: {
      /** @description BookVersion ID */
      bookVersionId?: string;
      /** @description Chapter ID */
      chapterId?: string;
      /** @description AudioChapter ID */
      audioChapterId?: string;
      /** @description Parent comment ID (for replies) */
      parentId?: string;
      /** @description Comment text */
      text: string;
    };
    UpdateCommentDto: {
      /** @description Updated text */
      text?: string;
      /** @description Moderation: hide/show */
      isHidden?: boolean;
    };
    LikeRequestDto: {
      /** @description ID of comment to like */
      commentId?: string | null;
      /** @description ID of book version to like */
      bookVersionId?: string | null;
    };
    LikeDto: {
      id: string;
      userId: string;
      bookVersionId?: string | null;
      commentId?: string | null;
      /** Format: date-time */
      createdAt: string;
    };
    LikeCountDto: {
      count: number;
    };
    ToggleLikeResponseDto: {
      liked: boolean;
      count: number;
    };
    ReadingProgressDto: {
      chapterNumber: Record<string, never> | null;
      audioChapterNumber: Record<string, never> | null;
      position: number;
    };
    UpdateReadingProgressDto: {
      /** @description Chapter number for text reading (>=1) */
      chapterNumber?: number;
      /** @description Audio chapter number for audio listening (>=1) */
      audioChapterNumber?: number;
      /**
       * @description Playback/scroll position; seconds for audio or fraction for text
       * @example 12.5
       */
      position?: number;
    };
    /** @enum {string} */
    ViewSource: 'text' | 'audio' | 'referral';
    CreateViewDto: {
      /** Format: uuid */
      bookVersionId: string;
      source: components['schemas']['ViewSource'];
      /** @description ISO date-time, must be <= now() */
      timestamp?: string;
    };
    /** @enum {string} */
    ViewsPeriod: 'day' | 'week' | 'month' | 'all';
    PresignRequestDto: {
      /**
       * @example cover
       * @enum {string}
       */
      type: 'cover' | 'audio';
      /**
       * @description MIME type of the file
       * @example image/jpeg
       */
      contentType: string;
      /**
       * @description Estimated file size in bytes
       * @example 1048576
       */
      size: number;
    };
    RateLimitConfigDto: {
      /**
       * @description Is rate limiting enabled
       * @example false
       */
      enabled: boolean;
      /**
       * @description Window size in milliseconds
       * @example 60000
       */
      windowMs: number;
      /**
       * @description Max actions allowed in window
       * @example 10
       */
      maxPoints: number;
      /**
       * @description Current driver name
       * @example inmemory
       */
      driver: string;
      /**
       * @description Keying strategy
       * @example userId|ip
       */
      scope: string;
      /**
       * @description Endpoints protected by the rate limiter
       * @example [
       *       "POST /comments",
       *       "PATCH /comments/:id",
       *       "DELETE /comments/:id"
       *     ]
       */
      endpoints: unknown[][];
    };
    CreateTagDto: {
      /**
       * @description Название тега
       * @example Motivation
       */
      name: string;
      /**
       * @description Slug тега
       * @example motivation
       */
      slug: string;
    };
    UpdateTagDto: {
      /** @description Название тега */
      name?: string;
      /** @description Slug тега */
      slug?: string;
    };
    AttachTagDto: {
      /** @description ID тега */
      tagId: string;
    };
    CreateTagTranslationDto: {
      /** @enum {string} */
      language: 'en' | 'es' | 'fr' | 'pt';
      /** @description Локализованное имя тега */
      name: string;
      /** @description Локализованный slug тега */
      slug: string;
    };
    UpdateTagTranslationDto: {
      /** @enum {string} */
      language?: 'en' | 'es' | 'fr' | 'pt';
      /** @description Локализованное имя тега */
      name?: string;
      /** @description Локализованный slug тега */
      slug?: string;
    };
    CreatePageDto: {
      /** @description Slug страницы */
      slug: string;
      /** @description Заголовок страницы */
      title: string;
      /** @enum {string} */
      type: 'generic' | 'category_index' | 'author_index';
      /** @description Контент страницы (markdown/HTML/текст) */
      content: string;
      /** @enum {string} */
      language?: 'en' | 'es' | 'fr' | 'pt';
      /** @description ID SEO сущности */
      seoId?: Record<string, never> | null;
    };
    UpdatePageDto: {
      /** @description Slug страницы */
      slug?: string;
      /** @description Заголовок страницы */
      title?: string;
      /** @enum {string} */
      type?: 'generic' | 'category_index' | 'author_index';
      /** @description Контент страницы (markdown/HTML/текст) */
      content?: string;
      /** @enum {string} */
      language?: 'en' | 'es' | 'fr' | 'pt';
      /** @description ID SEO сущности */
      seoId?: Record<string, never> | null;
      /**
       * @description Статус публикации
       * @enum {string}
       */
      status?: 'draft' | 'published';
    };
    ConfirmMediaDto: {
      /**
       * @description Storage object key (from /uploads)
       * @example covers/2025/08/26/uuid.jpg
       */
      key: string;
      /**
       * @description Public URL resolved by storage
       * @example http://localhost:3000/static/covers/2025/08/26/uuid.jpg
       */
      url: string;
      /**
       * @description Content type (MIME)
       * @example image/jpeg
       */
      contentType?: string;
      /** @description Size in bytes */
      size?: number;
      /** @description Width in px (images) */
      width?: number;
      /** @description Height in px (images) */
      height?: number;
      /** @description Optional content hash for dedupe (e.g., sha256) */
      hash?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getRoot: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AppController_getHealth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookController_findAll: {
    parameters: {
      query: {
        /** @description Page number */
        page: number;
        /** @description Number of records per page */
        limit: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Books list successfully retrieved */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBookDto'];
      };
    };
    responses: {
      /** @description Book successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid data format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookController_overview: {
    parameters: {
      query?: {
        /** @description Запрошенный язык (en|es|fr|pt) */
        lang?: string;
      };
      header: {
        'accept-language': string;
        /** @description RFC 7231 header, e.g. en-US,en;q=0.9,es;q=0.8 */
        'Accept-Language'?: string;
      };
      path: {
        /** @description Unique book slug */
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Overview returned */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Book not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookController_findBySlug: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Unique book slug */
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Book found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Book not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Unique book ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Book found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Book not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Unique book ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Book successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Book not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Unique book ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBookDto'];
      };
    };
    responses: {
      /** @description Book successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Book not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthResponse'];
        };
      };
    };
  };
  AuthController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthResponse'];
        };
      };
    };
  };
  AuthController_refresh: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RefreshDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthResponse'];
        };
      };
    };
  };
  AuthController_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example true */
            success?: boolean;
          };
        };
      };
    };
  };
  UsersController_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PublicUserDto'];
        };
      };
    };
  };
  UsersController_updateMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMeDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PublicUserDto'];
        };
      };
    };
  };
  UsersController_list: {
    parameters: {
      query?: {
        /** @description Filter staff: 'only' to show only admins/content managers; 'exclude' to hide them */
        staff?: 'only' | 'exclude';
        /** @description Search by email or name */
        q?: string;
        limit?: number;
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PagedUsersDto'];
        };
      };
    };
  };
  UsersController_getById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PublicUserDto'];
        };
      };
    };
  };
  UsersController_deleteById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_listRoles: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description User ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_assignRole: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description User ID */
        id: string;
        /** @description Role name */
        role: 'user' | 'admin' | 'content_manager';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_revokeRole: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description User ID */
        id: string;
        /** @description Role name */
        role: 'user' | 'admin' | 'content_manager';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookVersionController_list: {
    parameters: {
      query?: {
        language?: string;
        type?: string;
        isFree?: boolean;
        /** @description Только для админов/контент-менеджеров (требует авторизации и ролей). Если true — возвращает также черновики. */
        includeDrafts?: boolean;
      };
      header: {
        'accept-language': string;
        /** @description RFC 7231 header. Используется только если параметр language не задан: выбирает ближайший доступный язык из опубликованных версий. */
        'Accept-Language'?: string;
      };
      path: {
        bookId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookVersionController_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bookId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBookVersionDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  BookVersionController_listAdmin: {
    parameters: {
      query: {
        language: string;
        type: string;
        isFree: string;
      };
      header: {
        'x-admin-language': string;
      };
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
        bookId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookVersionController_createAdmin: {
    parameters: {
      query?: never;
      header: {
        'x-admin-language': string;
        /** @description Приоритетнее языка пути */
        'X-Admin-Language'?: string;
      };
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
        bookId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBookVersionDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookVersionController_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Found (published only for public endpoint) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  BookVersionController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookVersionController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBookVersionDto'];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  BookVersionController_publish: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Published */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  BookVersionController_unpublish: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Unpublished (set to draft) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  ChapterController_list: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Number of records per page */
        limit?: number;
      };
      header?: never;
      path: {
        bookVersionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ChapterController_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bookVersionId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateChapterDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ChapterController_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ChapterController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ChapterController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateChapterDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioChapterController_list: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Number of records per page */
        limit?: number;
      };
      header?: never;
      path: {
        bookVersionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioChapterController_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bookVersionId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAudioChapterDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioChapterController_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioChapterController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioChapterController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAudioChapterDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SeoController_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bookVersionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description SEO meta or null if not set */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SeoController_upsert: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bookVersionId: string;
      };
      cookie?: never;
    };
    /** @description Partial SEO fields to upsert */
    requestBody: {
      content: {
        'application/json': {
          /** @example My SEO title */
          metaTitle?: string;
          /** @example Concise description */
          metaDescription?: string;
          /** @example https://example.com/books/1 */
          canonicalUrl?: string;
          /** @example https://cdn.example.com/og.jpg */
          ogImageUrl?: string;
          /** @example 2025-08-17T12:00:00Z */
          eventStartDate?: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SeoController_resolve: {
    parameters: {
      query: {
        type: 'book' | 'version' | 'page';
        /** @description Entity identifier or slug (book/page). For version: id only. */
        id: string;
        /** @description Requested language (en|es|fr|pt) */
        lang?: string;
      };
      header: {
        'accept-language': string;
        'Accept-Language'?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Resolved SEO bundle */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SeoController_resolveWithLang: {
    parameters: {
      query: {
        type: 'book' | 'version' | 'page';
        /** @description Entity identifier or slug (book/page). For version: id only. */
        id: string;
      };
      header: {
        'accept-language': string;
        'Accept-Language'?: string;
      };
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Resolved SEO bundle */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookSummaryController_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bookVersionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookSummaryController_upsert: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bookVersionId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBookSummaryDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_list: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Number of records per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCategoryDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_tree: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Array of root categories with nested children */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CategoryTreeNodeDto'][];
        };
      };
    };
  };
  CategoryController_children: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Array of direct child categories */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CategoryTreeNodeDto'][];
        };
      };
    };
  };
  CategoryController_ancestors: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Array from root to parent (excluding the node itself) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCategoryDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_publicBySlug: {
    parameters: {
      query?: {
        /** @description Опциональный язык (?lang=...) */
        lang?: string;
      };
      header: {
        'accept-language': string;
        'Accept-Language'?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PublicController_categoriesBySlug: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Язык пути */
        lang: 'en' | 'es' | 'fr' | 'pt';
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_listTranslations: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_createTranslation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCategoryTranslationDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_deleteTranslation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        language: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_updateTranslation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        language: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCategoryTranslationDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_attach: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BookVersion id */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AttachCategoryDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CategoryController_detach: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BookVersion id */
        id: string;
        /** @description Category id */
        categoryId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BookshelfController_list: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Number of records per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BookshelfListDto'];
        };
      };
    };
  };
  BookshelfController_add: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        versionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BookshelfItemDto'];
        };
      };
    };
  };
  BookshelfController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        versionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CommentsController_list: {
    parameters: {
      query: {
        /** @description Page number */
        page?: number;
        /** @description Number of records per page */
        limit?: number;
        target: 'version' | 'chapter' | 'audio';
        targetId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentListDto'];
        };
      };
    };
  };
  CommentsController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCommentDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDto'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CommentsController_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDto'];
        };
      };
    };
  };
  CommentsController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Rate limit exceeded */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CommentsController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCommentDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDto'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  LikesController_like: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LikeRequestDto'];
      };
    };
    responses: {
      /** @description Created or already exists */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LikeDto'];
        };
      };
    };
  };
  LikesController_unlike: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LikeRequestDto'];
      };
    };
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  LikesController_count: {
    parameters: {
      query: {
        target: 'comment' | 'bookVersion';
        targetId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LikeCountDto'];
        };
      };
    };
  };
  LikesController_toggle: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LikeRequestDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ToggleLikeResponseDto'];
        };
      };
    };
  };
  ReadingProgressController_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        versionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReadingProgressDto'];
        };
      };
    };
  };
  ReadingProgressController_upsert: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        versionId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateReadingProgressDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReadingProgressDto'];
        };
      };
    };
  };
  ViewStatsController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateViewDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ViewStatsController_aggregate: {
    parameters: {
      query: {
        /** @description BookVersion id */
        versionId: string;
        period: components['schemas']['ViewsPeriod'];
        from?: string;
        to?: string;
        source?: 'text' | 'audio' | 'referral';
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ViewStatsController_top: {
    parameters: {
      query: {
        period: 'day' | 'week' | 'month' | 'all';
        limit?: number;
        source?: 'text' | 'audio' | 'referral';
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UploadsController_presign: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PresignRequestDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UploadsController_direct: {
    parameters: {
      query?: never;
      header: {
        'x-upload-token': string;
      };
      path?: never;
      cookie?: never;
    };
    /** @description Binary file body */
    requestBody: {
      content: {
        'application/json': string;
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UploadsController_confirm: {
    parameters: {
      query: {
        key: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UploadsController_delete: {
    parameters: {
      query: {
        key: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StatusController_getRateLimit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitConfigDto'];
        };
      };
    };
  };
  StatusController_sentryTest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_list: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Number of records per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTagDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTagDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_publicBySlug: {
    parameters: {
      query?: {
        /** @description Опциональный язык (?lang=...) */
        lang?: string;
      };
      header: {
        'accept-language': string;
        'Accept-Language'?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_attach: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BookVersion id */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AttachTagDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_detach: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BookVersion id */
        id: string;
        /** @description Tag id */
        tagId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_listTranslations: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_createTranslation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTagTranslationDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_deleteTranslation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        language: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_updateTranslation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
        language: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTagTranslationDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PagesController_getPublic: {
    parameters: {
      query?: {
        /** @description Запрошенный язык (en|es|fr|pt) */
        lang?: string;
      };
      header: {
        'accept-language': string;
        'Accept-Language'?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PagesController_adminList: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Number of records per page */
        limit?: number;
      };
      header: {
        'x-admin-language': string;
        /** @description Приоритетнее языка пути */
        'X-Admin-Language'?: string;
      };
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PagesController_create: {
    parameters: {
      query?: never;
      header: {
        'x-admin-language': string;
        /** @description Приоритетнее языка пути */
        'X-Admin-Language'?: string;
      };
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePageDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PagesController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PagesController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePageDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PagesController_publish: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PagesController_unpublish: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MediaController_confirm: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfirmMediaDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MediaController_list: {
    parameters: {
      query?: {
        /** @description Search by key substring */
        q?: string;
        /** @description Filter by content type prefix (e.g., image/, audio/) */
        type?: string;
        /** @description Page */
        page?: number;
        /** @description Limit */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MediaController_uploadOne: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file: string;
          /** @enum {string} */
          type?: 'cover' | 'audio';
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MediaController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PublicController_overview: {
    parameters: {
      query?: {
        /** @description Опциональный query lang (игнорируется, если задан язык пути) */
        lang?: string;
      };
      header: {
        'accept-language': string;
        /** @description RFC 7231 header. При наличии языка в пути — имеет меньший приоритет. */
        'Accept-Language'?: string;
      };
      path: {
        slug: string;
        /** @description Язык пути */
        lang: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PublicController_getPage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Язык пути */
        lang: 'en' | 'es' | 'fr' | 'pt';
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  PublicController_tagsBySlug: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Язык пути */
        lang: 'en' | 'es' | 'fr' | 'pt';
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SitemapController_sitemapIndex: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SitemapController_sitemapForLang: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        lang: 'en' | 'es' | 'fr' | 'pt';
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SitemapController_robots: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  HealthController_liveness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Process is alive */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  HealthController_readiness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Readiness status with details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MetricsController_getMetrics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  QueueController_status: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  QueueController_stats: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  QueueController_enqueue: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}

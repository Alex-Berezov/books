datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// =====================
// Основные сущности
// =====================

model Book {
  id        String        @id @default(uuid())
  slug      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  versions  BookVersion[]
}

model BookVersion {
  id              String            @id @default(uuid())
  bookId          String
  language        Language
  title           String
  author          String
  description     String
  coverImageUrl   String
  type            BookType
  isFree          Boolean
  referralUrl     String?
  // Публикация
  status          PublicationStatus @default(published)
  publishedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  book            Book              @relation(fields: [bookId], references: [id])
  summaries       BookSummary[]
  chapters        Chapter[]
  audioChapters   AudioChapter[]
  bookshelf       Bookshelf[]
  comments        Comment[]
  likes           Like[]
  categories      BookCategory[]
  tags            BookTag[]
  viewStats       ViewStat[]
  readingProgress ReadingProgress[]
  seo             Seo?              @relation("SeoForBookVersion", fields: [seoId], references: [id])
  seoId           Int?              @unique

  @@unique([bookId, language])
  @@index([bookId, language, type, isFree], name: "book_language_type_isFree_idx")
}

model BookSummary {
  id            String      @id @default(uuid())
  bookVersionId String
  summary       String
  analysis      String?
  themes        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  bookVersion   BookVersion @relation(fields: [bookVersionId], references: [id])
}

model Chapter {
  id            String      @id @default(uuid())
  bookVersionId String
  number        Int
  title         String
  content       String
  createdAt     DateTime    @default(now())
  bookVersion   BookVersion @relation(fields: [bookVersionId], references: [id])
  comments      Comment[]

  @@unique([bookVersionId, number])
}

model AudioChapter {
  id            String      @id @default(uuid())
  bookVersionId String
  number        Int
  title         String
  audioUrl      String
  duration      Int
  createdAt     DateTime    @default(now())
  bookVersion   BookVersion @relation(fields: [bookVersionId], references: [id])
  comments      Comment[]

  @@unique([bookVersionId, number])
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  passwordHash       String
  name               String?
  avatarUrl          String?
  languagePreference Language
  createdAt          DateTime          @default(now())
  lastLogin          DateTime?
  bookshelves        Bookshelf[]
  comments           Comment[]
  likes              Like[]
  viewStats          ViewStat[]
  readingProgress    ReadingProgress[]
  roles              UserRole[]
  mediaAssets        MediaAsset[]
}



model Bookshelf {
  id            String      @id @default(uuid())
  userId        String
  bookVersionId String
  addedAt       DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  bookVersion   BookVersion @relation(fields: [bookVersionId], references: [id])

  @@unique([userId, bookVersionId])
}

model Comment {
  id             String        @id @default(uuid())
  userId         String
  bookVersionId  String?
  chapterId      String?
  audioChapterId String?
  parentId       String?
  text           String
  isDeleted      Boolean       @default(false)
  isHidden       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id])
  bookVersion    BookVersion?  @relation(fields: [bookVersionId], references: [id])
  chapter        Chapter?      @relation(fields: [chapterId], references: [id])
  audioChapter   AudioChapter? @relation(fields: [audioChapterId], references: [id])
  parent         Comment?      @relation("CommentParent", fields: [parentId], references: [id])
  children       Comment[]     @relation("CommentParent")
  likes          Like[]

  @@index([bookVersionId])
  @@index([chapterId])
  @@index([audioChapterId])
  @@index([parentId])
}

model Like {
  id            String       @id @default(uuid())
  userId        String
  bookVersionId String? // FK на BookVersion
  commentId     String? // FK на Comment
  createdAt     DateTime     @default(now())
  user          User         @relation(fields: [userId], references: [id])
  bookVersion   BookVersion? @relation(fields: [bookVersionId], references: [id])
  comment       Comment?     @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@unique([userId, bookVersionId])
  @@index([commentId])
  @@index([bookVersionId])
}

model Category {
  id    String         @id @default(uuid())
  type  CategoryType
  name  String
  slug  String         @unique
  books BookCategory[]
  // Иерархия категорий (self-relation)
  parentId String?
  parent   Category?     @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[]    @relation("CategoryToCategory")

  @@index([parentId])
}

model BookCategory {
  id            String      @id @default(uuid())
  bookVersionId String
  categoryId    String
  bookVersion   BookVersion @relation(fields: [bookVersionId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])

  @@unique([bookVersionId, categoryId])
}

model Tag {
  id    String    @id @default(uuid())
  name  String
  slug  String    @unique
  books BookTag[]
}

model BookTag {
  id            String      @id @default(uuid())
  bookVersionId String
  tagId         String
  bookVersion   BookVersion @relation(fields: [bookVersionId], references: [id])
  tag           Tag         @relation(fields: [tagId], references: [id])

  @@unique([bookVersionId, tagId])
  @@index([tagId])
  @@index([bookVersionId])
}

model ViewStat {
  id            String      @id @default(uuid())
  bookVersionId String
  userId        String?
  source        ViewSource
  timestamp     DateTime    @default(now())
  bookVersion   BookVersion @relation(fields: [bookVersionId], references: [id])
  user          User?       @relation(fields: [userId], references: [id])

  @@index([bookVersionId, timestamp])
  @@index([userId])
}

model ReadingProgress {
  id                 String      @id @default(uuid())
  userId             String
  bookVersionId      String
  chapterNumber      Int?
  audioChapterNumber Int?
  position           Float
  updatedAt          DateTime    @updatedAt
  user               User        @relation(fields: [userId], references: [id])
  bookVersion        BookVersion @relation(fields: [bookVersionId], references: [id])

  @@unique([userId, bookVersionId])
}

// =====================
// Media Library
// =====================

model MediaAsset {
  id           String   @id @default(uuid())
  key          String   @unique
  url          String
  contentType  String?
  size         Int?
  width        Int?
  height       Int?
  hash         String?
  createdAt    DateTime @default(now())
  createdById  String?
  createdBy    User?    @relation(fields: [createdById], references: [id])
  isDeleted    Boolean  @default(false)

  @@index([createdAt])
  @@index([hash])
}

// =====================
// CMS Pages
// =====================

model Page {
  id        String      @id @default(uuid())
  slug      String      @unique
  title     String
  type      PageType
  content   String
  status    PublicationStatus @default(draft)
  language  Language
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  // Optional SEO one-to-one
  seo       Seo?        @relation("SeoForPage", fields: [seoId], references: [id])
  seoId     Int?        @unique
}

// =====================
// Seo модель
// =====================

model Seo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === Основные мета-теги ===
  metaTitle       String?
  metaDescription String?
  canonicalUrl    String?
  robots          String?

  // === Open Graph ===
  ogTitle       String?
  ogDescription String?
  ogType        String?
  ogUrl         String?
  ogImageUrl    String?
  ogImageAlt    String?

  // === Twitter Card ===
  twitterCard    String?
  twitterSite    String?
  twitterCreator String?

  // === Разметка событий (schema.org/Event) ===
  eventName            String?
  eventDescription     String?
  eventStartDate       DateTime?
  eventEndDate         DateTime?
  eventUrl             String?
  eventImageUrl        String?
  eventLocationName    String?
  eventLocationStreet  String?
  eventLocationCity    String?
  eventLocationRegion  String?
  eventLocationPostal  String?
  eventLocationCountry String?

  // Связь с BookVersion (1:1)
  bookVersion BookVersion? @relation("SeoForBookVersion")

  // Связь с Page (1:1)
  page Page? @relation("SeoForPage")
}

// =====================
// ENUMS
// =====================

enum Language {
  en
  es
  fr
  pt
}

enum BookType {
  text
  audio
  referral
}

enum LikeTarget {
  comment
  bookVersion
}

enum CategoryType {
  genre
  author
  popular
  etc
}

enum ViewSource {
  text
  audio
  referral
}

// Типы CMS-страниц
enum PageType {
  generic
  category_index
  author_index
}

// =====================
// Roles & Permissions
// =====================

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

enum RoleName {
  user
  admin
  content_manager
}

// =====================
// Publication Status
// =====================

enum PublicationStatus {
  draft
  published
}

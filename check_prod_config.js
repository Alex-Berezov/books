#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-require-imports */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω–∞
const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω–∞');
console.log('==================================\n');

// –ó–∞–≥—Ä—É–∑–∏—Ç—å .env.prod
const envPath = path.join(__dirname, '.env.prod');
if (!fs.existsSync(envPath)) {
  console.error('‚ùå –§–∞–π–ª .env.prod –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

const envContent = fs.readFileSync(envPath, 'utf8');
const envVars = {};

// –ü–∞—Ä—Å–∏—Ç—å .env —Ñ–∞–π–ª
envContent.split('\n').forEach((line) => {
  const match = line.match(/^([^#][^=]*)=(.*)$/);
  if (match) {
    envVars[match[1].trim()] = match[2].trim();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const checks = [
  {
    name: 'NODE_ENV',
    expected: 'production',
    actual: envVars.NODE_ENV,
    critical: true,
  },
  {
    name: 'SWAGGER_ENABLED',
    expected: '0',
    actual: envVars.SWAGGER_ENABLED,
    critical: true,
  },
  {
    name: 'RATE_LIMIT_GLOBAL_ENABLED',
    expected: '1',
    actual: envVars.RATE_LIMIT_GLOBAL_ENABLED,
    critical: true,
  },
  {
    name: 'TRUST_PROXY',
    expected: '1',
    actual: envVars.TRUST_PROXY,
    critical: true,
  },
  {
    name: 'JWT_ACCESS_SECRET',
    expected: 'exists',
    actual: envVars.JWT_ACCESS_SECRET ? 'exists' : 'missing',
    critical: true,
  },
  {
    name: 'JWT_REFRESH_SECRET',
    expected: 'exists',
    actual: envVars.JWT_REFRESH_SECRET ? 'exists' : 'missing',
    critical: true,
  },
  {
    name: 'DATABASE_URL',
    expected: 'exists',
    actual: envVars.DATABASE_URL ? 'exists' : 'missing',
    critical: true,
  },
  {
    name: 'DEFAULT_LANGUAGE',
    expected: 'en',
    actual: envVars.DEFAULT_LANGUAGE,
    critical: false,
  },
];

let allPassed = true;

checks.forEach((check) => {
  const passed = check.actual === check.expected;
  const icon = passed ? '‚úÖ' : check.critical ? '‚ùå' : '‚ö†Ô∏è';
  const status = passed ? 'OK' : 'FAIL';

  console.log(`${icon} ${check.name}: ${check.actual} (${status})`);

  if (!passed && check.critical) {
    allPassed = false;
  }
});

console.log('\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É JWT —Å–µ–∫—Ä–µ—Ç–æ–≤
if (envVars.JWT_ACCESS_SECRET) {
  const length = envVars.JWT_ACCESS_SECRET.length;
  console.log(`üîë JWT_ACCESS_SECRET length: ${length} —Å–∏–º–≤–æ–ª–æ–≤ ${length >= 32 ? '‚úÖ' : '‚ö†Ô∏è'}`);
}

if (envVars.JWT_REFRESH_SECRET) {
  const length = envVars.JWT_REFRESH_SECRET.length;
  console.log(`üîë JWT_REFRESH_SECRET length: ${length} —Å–∏–º–≤–æ–ª–æ–≤ ${length >= 32 ? '‚úÖ' : '‚ö†Ô∏è'}`);
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å DATABASE_URL format
if (envVars.DATABASE_URL) {
  const isPostgres = envVars.DATABASE_URL.startsWith('postgresql://');
  console.log(`üóÑÔ∏è  DATABASE_URL format: ${isPostgres ? 'PostgreSQL ‚úÖ' : 'Unknown ‚ö†Ô∏è'}`);
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª docker-compose.prod.yml
const dockerComposePath = path.join(__dirname, 'docker-compose.prod.yml');
if (fs.existsSync(dockerComposePath)) {
  const composeContent = fs.readFileSync(dockerComposePath, 'utf8');
  const usesEnvProd = composeContent.includes('.env.prod');
  const hasHealthcheck = composeContent.includes('/api/metrics');

  console.log(`üê≥ docker-compose.prod.yml uses .env.prod: ${usesEnvProd ? '‚úÖ' : '‚ùå'}`);
  console.log(
    `ü©∫ docker-compose.prod.yml healthcheck path: ${hasHealthcheck ? '/api/metrics ‚úÖ' : 'Wrong path ‚ùå'}`,
  );
} else {
  console.log('üê≥ docker-compose.prod.yml: ‚ùå Not found');
  allPassed = false;
}

console.log('\n' + '='.repeat(50));

if (allPassed) {
  console.log('üéâ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
  console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
} else {
  console.log('‚ùå –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
  console.log('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º');
  process.exit(1);
}

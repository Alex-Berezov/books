#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ bibliaris.com –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS –∏ Caddy
# –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞

set -euo pipefail

DOMAIN="bibliaris.com"
SERVER_IP="209.74.88.183"

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ $DOMAIN"
echo "================================"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%H:%M:%S') [INFO] $*"
}

log_success() {
    echo "$(date '+%H:%M:%S') [‚úÖ] $*"
}

log_error() {
    echo "$(date '+%H:%M:%S') [‚ùå] $*"
}

log_warning() {
    echo "$(date '+%H:%M:%S') [‚ö†Ô∏è] $*"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
check_dns() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ A-record
    dns_result=$(dig +short $DOMAIN A 2>/dev/null || echo "")
    
    if [[ "$dns_result" == "$SERVER_IP" ]]; then
        log_success "DNS A-record –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: $DOMAIN ‚Üí $SERVER_IP"
        return 0
    elif [[ -n "$dns_result" ]]; then
        log_error "DNS A-record –Ω–µ–≤–µ—Ä–µ–Ω: $DOMAIN ‚Üí $dns_result (–æ–∂–∏–¥–∞–ª—Å—è $SERVER_IP)"
        return 1
    else
        log_error "DNS A-record –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è $DOMAIN"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
check_ports() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ $SERVER_IP..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 80 (HTTP)
    if nc -z -w3 $SERVER_IP 80 2>/dev/null; then
        log_success "–ü–æ—Ä—Ç 80 (HTTP) –æ—Ç–∫—Ä—ã—Ç"
    else
        log_error "–ü–æ—Ä—Ç 80 (HTTP) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 443 (HTTPS)
    if nc -z -w3 $SERVER_IP 443 2>/dev/null; then
        log_success "–ü–æ—Ä—Ç 443 (HTTPS) –æ—Ç–∫—Ä—ã—Ç"
    else
        log_error "–ü–æ—Ä—Ç 443 (HTTPS) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
check_http() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP (–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ HTTPS)
    http_response=$(curl -s -o /dev/null -w "%{http_code}" -L http://$DOMAIN/api/health/liveness 2>/dev/null || echo "000")
    
    if [[ "$http_response" == "200" ]]; then
        log_success "HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: $http_response"
    else
        log_warning "HTTP –æ—Ç–≤–µ—Ç: $http_response"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
check_https() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS health endpoint
    https_response=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN/api/health/liveness 2>/dev/null || echo "000")
    
    if [[ "$https_response" == "200" ]]; then
        log_success "HTTPS API —Ä–∞–±–æ—Ç–∞–µ—Ç: $https_response"
    else
        log_error "HTTPS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $https_response"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    main_response=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN/ 2>/dev/null || echo "000")
    log "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: $main_response"
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
check_ssl() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
    ssl_info=$(echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -issuer -dates 2>/dev/null || echo "")
    
    if [[ -n "$ssl_info" ]]; then
        log_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω:"
        echo "$ssl_info" | while IFS= read -r line; do
            echo "   $line"
        done
    else
        log_error "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö endpoints
check_endpoints() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints..."
    
    endpoints=(
        "/api/health/liveness"
        "/api/health/readiness"
    )
    
    for endpoint in "${endpoints[@]}"; do
        response=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN$endpoint 2>/dev/null || echo "000")
        if [[ "$response" == "200" ]]; then
            log_success "$endpoint: $response"
        else
            log_error "$endpoint: $response"
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
check_performance() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    response_time=$(curl -o /dev/null -s -w "%{time_total}s" https://$DOMAIN/api/health/liveness 2>/dev/null || echo "timeout")
    
    if [[ "$response_time" != "timeout" ]]; then
        log "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: $response_time"
    else
        log_warning "Timeout –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
main() {
    local errors=0
    
    echo "üåê –î–æ–º–µ–Ω: $DOMAIN"
    echo "üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: $SERVER_IP"
    echo "‚è∞ –í—Ä–µ–º—è: $(date)"
    echo ""
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_dns || errors=$((errors + 1))
    echo ""
    
    check_ports || errors=$((errors + 1))
    echo ""
    
    check_http
    echo ""
    
    check_https || errors=$((errors + 1))
    echo ""
    
    check_ssl || errors=$((errors + 1))
    echo ""
    
    check_endpoints
    echo ""
    
    check_performance
    echo ""
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if [[ $errors -eq 0 ]]; then
        log_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! üéâ"
        echo ""
        echo "‚úÖ bibliaris.com –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω"
        echo "üîó API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://bibliaris.com/"
    else
        log_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $errors –æ—à–∏–±–æ–∫"
        echo ""
        echo "üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        echo "  - DNS –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—â–µ –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É (–ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ 48 —á–∞—Å–æ–≤)"
        echo "  - Caddy –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        echo "  - Firewall –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—ã 80/443"
        echo "  - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ localhost:5000"
        echo ""
        echo "üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:"
        echo "  systemctl status caddy"
        echo "  journalctl -u caddy -n 20"
        echo "  curl -I http://localhost:5000/api/health/liveness"
        
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing_deps=()
    
    for cmd in dig curl nc openssl; do
        if ! command -v $cmd &> /dev/null; then
            missing_deps+=($cmd)
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing_deps[*]}"
        log "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: sudo apt install dnsutils curl netcat-openbsd openssl"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
check_dependencies
main "$@"

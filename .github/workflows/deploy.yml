name: üì¶ Production Deployment

on:
  push:
    tags:
      - 'v*' # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–≥–∏ –≤–∏–¥–∞ v1.0.0, v2.1.3, etc.
    branches:
      - main # –ê–≤—Ç–æ–¥–µ–ø–ª–æ–π —Å main –≤–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (tag, branch, or commit)'
        required: true
        default: 'main'
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (emergency deploy)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: books-app
  DEPLOY_USER: deploy

jobs:
  # =====================================================
  # –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ò
  # =====================================================

  test:
    name: üß™ Tests & Quality Checks
    runs-on: ubuntu-22.04
    if: ${{ !github.event.inputs.skip_tests }}

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: books_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # –î–ª—è semantic versioning

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn

      - name: üîß Install Dependencies
        run: |
          yarn --frozen-lockfile
          yarn prisma generate

      - name: üìã Lint & Type Check
        run: |
          yarn lint
          yarn typecheck

      - name: üß™ Unit Tests
        run: yarn test
        env:
          NODE_ENV: test

      - name: üîß Setup Test Database
        run: |
          yarn prisma migrate deploy
          yarn prisma db seed
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/books_test?schema=public

      - name: üß™ E2E Tests
        run: yarn test:e2e:serial
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/books_test?schema=public
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  # =====================================================
  # –°–ë–û–†–ö–ê DOCKER –û–ë–†–ê–ó–ê
  # =====================================================

  build:
    name: üèóÔ∏è Build Docker Image
    runs-on: ubuntu-22.04
    needs: [test]
    if: ${{ always() && (needs.test.result == 'success' || github.event.inputs.skip_tests) }}

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîç Extract Version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="main-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: üîë Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and Push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üìã Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          artifact-name: sbom-${{ steps.version.outputs.version }}.spdx.json
          output-file: ./sbom-${{ steps.version.outputs.version }}.spdx.json

      - name: üîç Security Scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ steps.meta.outputs.tags }}
          fail-build: false # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–ø–ª–æ–π –ø—Ä–∏ —Å—Ä–µ–¥–Ω–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö

  # =====================================================
  # –î–ï–ü–õ–û–ô –í PRODUCTION
  # =====================================================

  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-22.04
    needs: [build]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ vars.PRODUCTION_DOMAIN }}

    steps:
      - name: üì• Checkout Deployment Scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/deploy_production.sh
            scripts/health_check.sh
            docker-compose.prod.yml
            .env.prod.template
          sparse-checkout-cone-mode: false

      - name: üîë Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: üìã Prepare Deployment
        run: |
          echo "üîß Deployment configuration:"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Server: ${{ vars.PRODUCTION_SERVER }}"
          echo "Domain: ${{ vars.PRODUCTION_DOMAIN }}"

      - name: üöÄ Deploy to Server
        run: |
          # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è
          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ vars.PRODUCTION_SERVER }} << 'EOF'
            set -euo pipefail
            
            echo "üîÑ Preparing deployment environment..."
            cd /opt/books/app
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–µ–ø–ª–æ—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if [[ -d ".git" ]]; then
              git fetch origin main
              git checkout origin/main -- scripts/deploy_production.sh docker-compose.prod.yml
              chmod +x scripts/deploy_production.sh
            fi
            
            # –õ–æ–≥–∏–Ω –≤ registry –¥–ª—è pull –æ–±—Ä–∞–∑–∞
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            echo "üöÄ Starting deployment..."
            ./scripts/deploy_production.sh \
              --version "${{ needs.build.outputs.version }}" \
              --registry "${{ env.REGISTRY }}/${{ github.repository_owner }}" \
              --force
            
            echo "‚úÖ Deployment completed!"
          EOF

      - name: üè• Health Check
        run: |
          echo "üè• Running post-deployment health checks..."

          # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
          max_attempts=20
          attempt=0

          while [[ $attempt -lt $max_attempts ]]; do
            if curl -sf "https://${{ vars.PRODUCTION_DOMAIN }}/api/health/liveness"; then
              echo "‚úÖ Service is healthy!"
              break
            fi
            
            ((attempt++))
            echo "‚è≥ Attempt $attempt/$max_attempts..."
            sleep 15
          done

          if [[ $attempt -eq $max_attempts ]]; then
            echo "‚ùå Health check failed after $max_attempts attempts"
            exit 1
          fi

      - name: üìä Verify Deployment
        run: |
          echo "üìä Verifying deployment..."

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ API
          api_response=$(curl -sf "https://${{ vars.PRODUCTION_DOMAIN }}/api/health/liveness")
          api_version=$(echo "$api_response" | jq -r '.version // "unknown"')

          echo "üîç API Version: $api_version"
          echo "üéØ Expected Version: ${{ needs.build.outputs.version }}"

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
          endpoints=(
            "/api/health/readiness"
            "/api/metrics"
          )

          for endpoint in "${endpoints[@]}"; do
            if curl -sf "https://${{ vars.PRODUCTION_DOMAIN }}$endpoint" > /dev/null; then
              echo "‚úÖ $endpoint - OK"
            else
              echo "‚ùå $endpoint - FAILED"
              exit 1
            fi
          done

          echo "‚úÖ All verifications passed!"

  # =====================================================
  # –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
  # =====================================================

  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-22.04
    needs: [build, deploy]
    if: always()

    steps:
      - name: üì¢ Notify Success
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          echo "üéâ Deployment successful!"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "URL: https://${{ vars.PRODUCTION_DOMAIN }}"

          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å:
          # - Slack (webhook)
          # - Discord
          # - Telegram
          # - Email

      - name: üö® Notify Failure
        if: ${{ needs.deploy.result == 'failure' }}
        run: |
          echo "‚ùå Deployment failed!"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # =====================================================
  # –û–¢–ö–ê–¢ (Manual trigger)
  # =====================================================

  rollback:
    name: ‚è™ Emergency Rollback
    runs-on: ubuntu-22.04
    if: failure() && github.event_name == 'workflow_dispatch'
    environment:
      name: production

    steps:
      - name: üîë Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: ‚è™ Rollback Deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ vars.PRODUCTION_SERVER }} << 'EOF'
            set -euo pipefail
            
            echo "‚è™ Starting emergency rollback..."
            cd /opt/books/app
            
            if [[ -f "./scripts/deploy_production.sh" ]]; then
              ./scripts/deploy_production.sh --rollback --force
              echo "‚úÖ Rollback completed!"
            else
              echo "‚ùå Rollback script not found!"
              exit 1
            fi
          EOF
